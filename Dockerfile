# ==============================================================================
# Library Management System - Dockerfile
# Multi-stage build를 사용하여 최종 이미지 크기를 최소화
# ==============================================================================

# ------------------------------------------------------------------------------
# Stage 1: Build (빌드 단계)
# - 결과물: JAR 파일 (build/libs/*.jar)
# ------------------------------------------------------------------------------
# Gradle 8.5와 JDK 17이 포함된 공식 이미지를 빌드 스테이지의 베이스로 사용
FROM gradle:8.5-jdk17 AS builder
# 컨테이너 내 작업 디렉토리를 /app으로 설정 (모든 후속 명령이 이 디렉토리에서 실행됨)
WORKDIR /app

# Gradle 빌드 설정 파일들을 컨테이너로 복사 (의존성 캐싱 최적화를 위해 소스 코드보다 먼저 복사)
COPY build.gradle settings.gradle ./
# Gradle wrapper 관련 파일들을 컨테이너로 복사
COPY gradle ./gradle

# --no-daemon: Gradle 데몬 사용 안 함 (컨테이너 환경에서 권장)
# 프로젝트 의존성을 미리 다운로드 (별도 레이어로 캐싱하여 소스 코드 변경 시 재다운로드 방지)
RUN gradle dependencies --no-daemon

# 소스 코드 복사
COPY src ./src

# 애플리케이션 빌드
# clean: 이전 빌드 산출물 제거
# build: 애플리케이션 빌드
# -x test: 테스트 건너뛰기 (빌드 시간 단축)
# --no-daemon: Gradle 데몬 사용 안 함
RUN gradle clean build -x test --no-daemon

# ------------------------------------------------------------------------------
# Stage 2: Runtime (실행 단계)
# - 목적: 빌드된 JAR 파일만 포함한 경량 실행 이미지 생성
# - Base Image: eclipse-temurin:17-jre-alpine (경량 Alpine Linux 기반 JRE)
# - 최종 이미지 크기: 약 493MB
# ------------------------------------------------------------------------------
# 경량화된 Alpine Linux 기반 JRE 17 이미지를 런타임 스테이지의 베이스로 사용
FROM eclipse-temurin:17-jre-alpine
# 컨테이너 내 작업 디렉토리를 /app으로 설정
WORKDIR /app

# ------------------------------------------------------------------------------
# 보안 설정: Non-root 사용자 생성
# - 컨테이너를 root가 아닌 일반 사용자로 실행하여 보안 강화
# - addgroup -S: 시스템 그룹 생성
# - adduser -S: 시스템 사용자 생성 (홈 디렉토리 없음, 로그인 불가)
# ------------------------------------------------------------------------------
# 보안을 위해 non-root 사용자(spring)와 그룹(spring)을 생성
RUN addgroup -S spring && adduser -S spring -G spring

# ------------------------------------------------------------------------------
# 디렉토리 생성 및 소유권 설정
# ⚠️ 중요: USER 명령 전에 실행해야 함 (root 권한 필요)
# - mkdir -p: 디렉토리 생성 (부모 디렉토리 포함)
# - chown -R: 재귀적으로 소유권 변경
# ------------------------------------------------------------------------------
RUN mkdir -p /app/uploads && chown -R spring:spring /app

# ------------------------------------------------------------------------------
# 빌드 단계에서 생성된 JAR 파일 복사
# - COPY --from=builder: 이전 빌드 스테이지에서 파일 복사
# - *.jar: 빌드된 모든 JAR 파일 (일반적으로 1개)
# ------------------------------------------------------------------------------
# 빌드 스테이지에서 생성된 JAR 파일을 현재 스테이지로 복사
COPY --from=builder /app/build/libs/*.jar app.jar

# JAR 파일 소유권을 spring 사용자로 변경
RUN chown spring:spring /app/app.jar

# ------------------------------------------------------------------------------
# 사용자 전환
# - 이제부터 모든 명령이 spring 사용자 권한으로 실행됨
# - 보안 강화: 애플리케이션이 제한된 권한으로 실행
# ------------------------------------------------------------------------------
# 컨테이너 실행 사용자를 spring으로 전환 (이후 모든 명령은 spring 사용자 권한으로 실행)
USER spring:spring

# ------------------------------------------------------------------------------
# 포트 노출
# - 8081: Spring Boot 애플리케이션이 사용하는 포트
# - 문서화 목적 (실제 포트 바인딩은 docker run -p 옵션으로 설정)
# ------------------------------------------------------------------------------
EXPOSE 8081

# ------------------------------------------------------------------------------
# Health Check 설정
# - Docker가 컨테이너 상태를 자동으로 모니터링
# - interval: 30초마다 체크
# - timeout: 3초 내 응답 없으면 실패
# - start-period: 시작 후 60초는 유예 기간
# - retries: 3회 연속 실패 시 unhealthy 상태
# - Spring Actuator의 /actuator/health 엔드포인트 사용
# ------------------------------------------------------------------------------
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
CMD wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1
# Health check 엔드포인트를 호출하여 애플리케이션 상태 확인 (실패 시 exit 1 반환)

# ------------------------------------------------------------------------------
# 애플리케이션 실행
# - java: JVM 실행
# - -Djava.security.egd: 난수 생성 최적화 (시작 시간 단축)
# - -Dspring.profiles.active: Spring 프로파일 설정 (기본값: prod)
# - -jar app.jar: JAR 파일 실행
# ------------------------------------------------------------------------------
ENTRYPOINT ["java", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-prod}", \
    "-jar", \
    "app.jar"]
