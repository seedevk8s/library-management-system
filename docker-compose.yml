# ==============================================================================
# Library Management System - Docker Compose Configuration
# MySQL과 Spring Boot 애플리케이션을 함께 실행하는 완전한 로컬 환경 구성
# ==============================================================================

version: '3.8'

services:
  # ----------------------------------------------------------------------------
  # MySQL Database Service
  # - MySQL 8.0 데이터베이스 서버
  # - 애플리케이션 데이터 저장
  # - 데이터 영속성을 위한 볼륨 마운트
  # ----------------------------------------------------------------------------
  mysql:
    # MySQL 8.0 공식 이미지 사용
    image: mysql:8.0
    
    # 컨테이너 이름
    container_name: library-mysql
    
    # 환경 변수 설정
    environment:
      # MySQL root 비밀번호 (⚠️ 운영 환경에서는 반드시 변경)
      MYSQL_ROOT_PASSWORD: 12345
      
      # 자동 생성할 데이터베이스 이름
      MYSQL_DATABASE: librarydb
      
      # 추가 MySQL 설정
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
      
      # 시간대 설정
      TZ: Asia/Seoul
    
    # 포트 매핑 (호스트:컨테이너)
    # 호스트의 3307 포트로 MySQL 접속 가능 (로컬 MySQL과 충돌 방지)
    ports:
      - "3307:3306"
    
    # 볼륨 마운트 (데이터 영속성)
    volumes:
      # MySQL 데이터 디렉토리 (컨테이너 재시작 시에도 데이터 유지)
      - mysql-data:/var/lib/mysql
      
      # MySQL 설정 파일 (선택사항)
      # - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    
    # 네트워크 설정
    networks:
      - library-network
    
    # 헬스체크 설정 (MySQL 준비 상태 확인)
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p12345"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    
    # 재시작 정책
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # Application Service
  # - Spring Boot 애플리케이션을 Docker 컨테이너로 실행
  # - MySQL 컨테이너에 연결 (같은 네트워크 내에서 서비스 이름으로 접근)
  # ----------------------------------------------------------------------------
  app:
    # 빌드 설정: 현재 디렉토리의 Dockerfile 사용
    build:
      context: .
      dockerfile: Dockerfile
    
    # 컨테이너 이름
    container_name: library-app
    
    # 환경 변수 설정
    environment:
      # Spring 프로파일 (dev: 개발, prod: 운영)
      SPRING_PROFILES_ACTIVE: prod
      
      # 데이터베이스 연결 URL
      # mysql: Docker Compose 네트워크 내에서 MySQL 서비스 이름
      # useSSL=false: SSL 미사용 (로컬 개발 환경)
      # allowPublicKeyRetrieval=true: MySQL 8.0+ 인증 방식 지원
      # serverTimezone=Asia/Seoul: 시간대 설정
      # characterEncoding=UTF-8: 문자 인코딩
      DB_URL: jdbc:mysql://mysql:3306/librarydb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
      
      # 데이터베이스 인증 정보
      DB_USERNAME: root
      DB_PASSWORD: 12345
    
    # 포트 매핑
    ports:
      - "8081:8081"
    
    # 볼륨 마운트
    volumes:
      # 파일 업로드 디렉토리
      - ./uploads:/app/uploads
      
      # 로그 디렉토리
      - ./logs:/app/logs
    
    # 네트워크 설정
    networks:
      - library-network
    
    # 의존성 설정 (MySQL이 먼저 시작되고 healthy 상태가 된 후 앱 시작)
    depends_on:
      mysql:
        condition: service_healthy
    
    # 재시작 정책
    restart: unless-stopped

# ------------------------------------------------------------------------------
# Networks
# - 컨테이너 간 통신을 위한 브리지 네트워크
# - mysql과 app이 같은 네트워크에서 통신
# ------------------------------------------------------------------------------
networks:
  library-network:
    driver: bridge

# ------------------------------------------------------------------------------
# Volumes
# - MySQL 데이터 영속성을 위한 Named Volume
# - docker-compose down으로 컨테이너를 삭제해도 데이터 유지
# - 완전 삭제: docker-compose down -v
# ------------------------------------------------------------------------------
volumes:
  mysql-data:
    driver: local

# ==============================================================================
# 참고사항
# ==============================================================================
# 
# 1. 로컬 MySQL 사용
#    - 이 설정은 로컬에 설치된 MySQL을 사용합니다
#    - MySQL이 localhost:3306에서 실행 중이어야 합니다
#    - librarydb 데이터베이스가 미리 생성되어 있어야 합니다
#
# 2. host.docker.internal
#    - Docker Desktop (Windows/Mac)에서만 작동합니다
#    - Linux에서는 extra_hosts 설정 필요:
#      extra_hosts:
#        - "host.docker.internal:host-gateway"
#
# 3. 볼륨 권한
#    - Windows: Docker Desktop이 자동으로 처리
#    - Linux: 호스트 디렉토리 권한 설정 필요 (chown 1000:1000)
#
# 4. 사용 명령어
#    - 시작: docker-compose up -d
#    - 중지: docker-compose down
#    - 로그: docker-compose logs -f
#    - 재시작: docker-compose restart
#
# ==============================================================================
