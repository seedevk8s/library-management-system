name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
      - feature/cicd-ecs-blue-green-deployment
      - feature/phase4-github-actions-workflow
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: library-management-system
  ECS_CLUSTER: library-management-cluster
  ECS_SERVICE: library-service
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: app

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update image in task definition
        run: |
          sed -i 's|"image": "[^"]*"|"image": "${{ steps.build-image.outputs.image }}"|' ${{ env.ECS_TASK_DEFINITION }}
          echo "Updated task definition:"
          cat ${{ env.ECS_TASK_DEFINITION }}

      - name: Register new Task Definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "Registered Task Definition: $TASK_DEF_ARN"
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Delete existing service
        continue-on-error: true
        run: |
          echo "Deleting existing service..."
          aws ecs delete-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force
          
          echo "Waiting for service to be deleted..."
          aws ecs wait services-inactive \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Create new ECS Service
        run: |
          echo "Creating new service with Task Definition: ${{ steps.register-task-def.outputs.task_definition_arn }}"
          
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-0eb8d0b96a8e96f23,subnet-08580256bc3bd0ab1],securityGroups=[$(aws ec2 describe-security-groups --filters Name=group-name,Values=library-ecs-task-sg --query 'SecurityGroups[0].GroupId' --output text)],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=$(aws elbv2 describe-target-groups --names library-blue-tg --query 'TargetGroups[0].TargetGroupArn' --output text),containerName=${{ env.CONTAINER_NAME }},containerPort=8081" \
            --health-check-grace-period-seconds 60

      - name: Wait for service stability
        run: |
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Deployment Summary
        run: |
          echo "### ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Task Definition**: ${{ steps.register-task-def.outputs.task_definition_arn }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Name**: ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
